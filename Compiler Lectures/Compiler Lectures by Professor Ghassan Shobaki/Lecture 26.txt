
                            =======================================================================
                             Compilers Lecture 26: Code Generation for Conditionals and Loops (2)
                            =======================================================================

=======
Example
=======
st1 
while (r1 > r2) 
{
   st2 
   while (r3 <= r4) 
     st3 
   st4 
}
st5

===========================================
Compare instructions that we will be using 
===========================================
i) cmp_GT r1, r2 -> rx 
   cbr  rx, L1, Ll 2 

ii) cmp_LE

===============
Generating code
================
st1; 
L1-C: cmp r1, r2 -> r5  //r5, because we are assuming that we are using the GetNextRegister function. In the above code, you can see that the last register was r4.
      cbr r5-> L1_B , LI_O  //L1_B = loop body.  L1_O = Loop out . L1_C : loop condition 

L1-B: st2 

L2-C: cmp r3, r4 -> r6 
      cbr r6 -> L2-B, L2_O 

L2-B:  st3 
       jmpI L2-C

L2-O: st4
     jmpI L1_C
L1_O: st5


So this is an important part of the assignent. And remember that this is recursive. And you have to have a function to generate all this systematically. aND 
remember that this is based on the AST. 

     (St1)  //we have a next pointer for every node.
       |
     (While           )
       |    \        \
     (st5)  (cond)   (Body) 
                       |
                      (st2)
                       |
                      (while)
                       |   \       \ 
                     (st4)  (cond)  (body)
                                      \
                                      (st3)

In the assignment, the condition, can be an arbitrarily long and complex expression. So again, the condition can have a whole tree below it. Because it can 
be arbitrarily long and complex expression. And the body can be a statement list.  The next pointer in the while loop is a conceptually different pointer
than these pointers to what constitutes the while loop. These pointers are the pointers to the two components that make up a while loop. A while loop has a 
condition and a body. And the next pointer is a different kind of pointer. It is a pointer to what comes after it in the list of statements that it belongs
to. If you're programming this in an object oriented language (like C++) then this next pointer conceptually should not belong to the while node. It should
belong to any list element. So for any list element. But while as a while -- it has a condition and a body. How can you implement it? Well the easiest way is 
to put all of these possible pointers inside the AST node. So you can have an ASTNode and inside it, you can have everything in it. This would be the easiest
but it would not be the most elegant of structuring this. So the ASTNode can have condition, body, then, else, next. 
Ideally, an ASTNode should have ONLY the elements that belong to all nodes. And you derive from the ASTNode. You derive a WhileNode. You derive a dervied 
class for a WhileNode. And the while node will have a body annd a condition. And an IfNode can have condition, then and an else.  And an AddNode , you will
have to have expression1 (the lefthand side expression) and expression2 (second operand). So ideally you would liek to have a dervied class for each node type
that has the fields that are specific to this type. But if you put everything in one generic node then that will work (but it won't be an elegant design, though
we are writing it in C anyway).