
                            ============================================================
                             Compilers Lecture 23: Syntax-Directed Translation (2)
                            ============================================================

================================================================
What do we do in Syntax Directed Translation. "Embedded Actions"
================================================================
We have the grammar and in this grammar we add we call "Embedded actions" -- these are the actions that embed into our grammar. And these actions will get
executed whenever we make a reduction during parsing. 

=====================
Simulation of a parse //BASED ON LR(1) parsing 
======================

------      --------            ---------- 
Stack        String              Action
------      --------            ----------
[]          x=a*3+b             shift
[x]         =a*3+b              shift   //Should we reduce this to ident and then ident to factor? No, it will not reduce. How will it know not to reduce?
                                        //Because a Factor is never followed by an equal sign. So in this case, it will just shift
[x,=]       a*3+b               shift 
[x,=,a]     *3+b                reduce  //because a factor can be followed by a multiply. So this move is legal 
[x,=,Term]  *3+b                reduce  //beccause a Term can be followe dbya multipy 
[x,=,Term,*] 3+b                 shift 
[x,=,Term,*,3] +b                reduce 
[x,=,Term,*,Factor] +b           reduce //because an expression can be followed by a + symbol
[x,=, Exp+]      b                shift
[x,=,Exp+b]     _                reduce 
[x,=,Exp+Factor] _               reduce
[x,=,Exp + Term] _               reduce
[x,=,Exp]        _               reduce
[Assign]         _               reduce 
[Goal]           _                  _ 

===========================
Why are we doing the above?
============================
Here, derivation is a sequence of shifts and reductions. And with some of these reductions an action will take place. And with some of them, no action will
take place. The way we do this in practice is that we will write a grammar with embedded actions within it. And these embedded actions will have C code. 
So we will write Code in C. Then that is all that we will do. THe parser generator will generate an LR(1) parser for this grammar. And that L R(1) parser 
whenever it does a reduction according a certain rule, it is going to generate the code that you wrote for that reduction. You can put any kind of code 
for a certain rule if you want. It can be a line, multiple lines or a million lines of code. You have to think about the actions that you want to do 
at each reduction. You have to think about which of these reductions result into actual actions and which one of these reductions do not result into 
actual actions. In case of the ones where no actual actions are to be performed, you will just be passing values up. For ex: reducing factor to a term, 
there is no actual operation. So you will just pass the values up in that case.

========
Reminder about $$  and $num
========
$$ is always always associated with the left hand side of the symbol and the $num such as $1 or $2 is always associated with the symbol to the right. So 
make sure that you count all the symbols on the right hand side. And a symbol could be a terminal or a non-terminal.

=================================
What are we going to move to next
=================================
In a minute, we will go through another example that instead of constructing an AST will compute an estimate of the computational cost of a given 
computation. Also, we don't necessarily have to use this to construct an AST. The example that we will be going through will help us understand how this 
works and how the information is passed up.

============================
Cost of different operations
============================
Let's say that: 
Cost(Add) = 1 unit 
Cost(sub) = 1 unit
Cost(Mult) = 3 unit 
Cost(Div) = 7 unit
Cost(load) = 4 unit
Cost(store) = 3 unit
Cost(loadImmediate) = 1 

Now given these costs, we would like to write embedded actions in this grammar to compute or to estimate the computational cost of a given string (in
this case, an assignment statement).

===========
Example String
==============
The string for our example is:  x  = a * 3 + b 
==========================================
The computation will start from the leaves
===========================================
So for an identifier here, in order to compute this, we will assume that the code that will get generated is going to load 'a' from the memory. So, for 
every identifier reduced to a factor, we will have an embedded action: $$ = cost(load) //in this case, the cost of a load is 4. SO whenever there is an 
//identifier, we are assuming that the generated code will be load. Now is this assumption a valid assumption? Or does it make sense or not? But is it 
//a resonable assumption to make that whenever there is an identifier, it will  get loaded from the memory? 

==================================================================================================
Is it a reasonable assumption to make that whenever there is an identifier, it will get loaded...
==================================================================================================
Let's say that we have something like:  
                                       x = a * b + c + a + 3 * a + 7 * a 
So the code that will get generated for this is not going to "a" 4 times. It is going to load it once and then reuse. But in order to find out whether this
"a" has been loaded or not, how do you think the compiler is able to tell that? The answer is that we have to store this information in a table. We have
to store this information in some data structure. And one data structure that we can use is the "SYMBOL TABLE" -- one of the most important data structures
in a compiler. This symbol table is going to have all the symbols in it with some information. One of the pieces of information is the memory location -- 
the memory location is the location of this variable in memory, which is what we care about. And in this, you can add "isLoaded" flag indicating whether 
a variable is loaded in THE CURRENT BLOCK. If this is loaded then the cost is the cost of a load otherwise the cost is 0.


===============================================
What code do we add to make a check like this?
==============================================
if (token isLoaded) 
      $$ = 0 
else 
      $$ = cost(load)

===================
The point to pick up
====================
For now, we want an identifier to be loaded recently and in the current block of code that we are currently processing. It may have been loaded previously
in a code that is distant from the current piece of code that we are processing (so it could be too distant). The idea is that a variable will not get 
loaded all the time. 

===================================================================
If an identifier gets loaded then what happens in case of a number?
===================================================================
We can do a loadImmediate. And we can assume that the cost of a loadImmediate is 1. Here we can say: 
$$ = cost(LoadImmediate). 

==========================
Cost of a factor -> (Expr) rule
==========================
$$ = $2  

Why $2? Beause first bracket is $1, the expr is $2 and the closing bracket is $3.

====================================
Reminder: At what level do we load?
====================================
WE load at the leaf level, however that may or may not happen.

==============================
Cost of Term -> Term / Factor
===============================
So first off, it is very possible that the Term child can have a whole tree below it and this Factor on the right hand side can have a tree on its own  
below it. So whatever this Term is, we want to take its cost and the cost of a factor and then add to that, the cost of the divide. So how do we express 
this using the dollar sign notation: 
 $$ = $1 + cost(div) + $3

=====================
Cost of Expr -> Term
======================
$$ = $1 

===========================
Cost of Expr -> Expr - Term
============================
$$ = $1 + cost(sub) + $3


===============================
Cost of Assign -> ident = Expr
===============================
This "ident" is not something that we are going to load. So we will store it at a different address.  So: 
$$ = $3 + cost(Store)  

So the only thing that requires computation is the expression then we will have to assign it to store it at a given address. How will we know the address? 
We will look up the address for this identifier in the symbol table and then we will store it at that memory location. So there is no loading involved here. 

=======================
Cost for Goal -> Assign
========================
$$ = $1 


================================
Tracin all these in an example
===============================
Our example string is:            x = a * 3 + b


===========================
AST for our example string (with costs labeled)
===========================
                      Goal 
                     Assign 16
             ident    =     Expr 13          ;
                      3  8 Expr  + Term 4
                       Term 8   1  Factor 4
                  Term * Factor     ident 4
               4  Fator 3  num 1       b 4 
                4 ident
                4  a 


===========
So what is happening here
===========
We start bottom up. With this tree, what will happen, the first thing is that we will reduce an identifier to a Factor. When we do this, we calculate the 
cost of a load -- for which the cost will be "4". Then we will do a reduction from a Factor to a Term. When we do this, we are just passing the "4" up. 
So this "4" which is just the cost of a load will get passed up. So we will label the cost of Term as "4". So for each node in the tree, there is a value
associated with it. And this "$$" is that value. And these actions define the value of a node in terms of the values of its children. So this is post 
order tree traversal because we are defining the value of the current node in terms of the value of its children. So we have to process the children 
first before we can process their parent.

================================================
Why are we computing the cost of each operation?
================================================
This is an exercise at this point. From a practical point of view, it is useful. Sometimes the compiler even a high level representation of the code,
may want to estimate the number of operations needed to compute a certain expression or a certain block of code. It is useful to compute an estimate of 
evaluating a certain block of code or a certain function or whatever. 
So for example, a prefetcher in the gcc is a compiler optimization stage that adds prefetch instructions to prefetch memory locations before they are 
needed. So that when you need them, they are already in the cache. And in order to figure out the prefetching in a given loop. In order to figure out 
how early you might want to prefetch something in a certain loop iteration to use it in the next iteration. Let's say that we want to prefetch A[i+delta] 
when we are currently in A[i]. SO we want to prefetch something from the next iteration. Now how far ahead should this be? Should you fetch for iteration #2
or iteration 3 or iteration 4? This depends on the body of the loop. What you are executing in the loop and how much computation you expect to happen inside
the loop, so that you know whether to fetch 3 iterations ahead or 10 iterations or a 100 iterations ahead. Depending on how big the loop is. And in order to 
know how big the loop is, you need to come up with some estimate like the one that we came up with above. so it is not just counting. Counting instructions 
is not enough because some operations are more expensive than the others -- like a divide is more expensive than a multiply. In practice, compilers may want
to do this kind of computation. 
But we are just doing it to understand the embedded actions and the dollar sign notation. To understand how the embedded actions and the dollar sign notation
works.

========================================================================================
Right embedded actions that will count the number of divide operations in the expression
========================================================================================
So how do we modify these actions? So instead of computing an estimate of the computational cost, we will like to just count how many divides there are 
in an expression. So if you have an expression like: x = a/b + 3/4 + c * d + f/n; 
So if we have an expression like the above, we want our count to be 3 because there are 3 divides above.
So how do we modify our actions to count the number of divides in an expression? 

============
Grammar
===========
Block -> Assign        $$ = $1
       | BlockAssign   $$ = $1 + $2 //why? Because we are doing the recursion. So we are saying that when we do the recursion, the number of divides in the 
                                   //lhs block is equal to the right hand side block and the assign. So if we have 10 assignments in the right block, when 
                                  // we do the final reduction, the rhs assignment is going to be the last assignment and the block is going to have 9 assignments
                                 //in it.
Assign -> iden = Expr; $$ = $3 
Expr -> Expr + Term    $$ = $1 + $3 
       | Expr - Term   $$ = $1 + $3 
       | Term          $$ = $1 

Term -> Term * Factor   $$ = $3 + $1 
       | Term / Factor  $$ = $1 + $3 + 1 
       | Factor  $$ = $1  
Factor -> (Expr) $$ = $1   //becaues the number of divides in this factor will be equal to the number of divs in the expression.  
         | num   $$ = 0  
         | ident $$ = 0 

