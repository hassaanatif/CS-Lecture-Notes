
                            ============================================================
                             Compilers Lecture 19: Parsing (8): LR(1) Parsing, Part II
                            ============================================================

===========================================================================
What are the two Major decisons that we have to make in a Bottom up Parser
===========================================================================
Whether to shift or to reduce. 

====================================================
What does shifting means and What about Reduction? 
=====================================================
Get the next symbol from the input and put it on  the stack. So we have to systematically decide whether to shift or to reduce. But suppose that we decide to 
reduce? Is that it? No. So it is not sufficient to decide that we need to reduce. What should we specifically decide? We need to decide reduce by WHAT 
production. Because reduction can be done by multiple productions. And we should decide which production to use. 

=====================
When does LR(1) Fail?
======================
So if at some point, if the parser doesn't know whether to shift or to reduce. If both options are possible then LR(1) parsing fails on that grammar. 
Also if you try to reduce but there are multiple productions by which you can reduce and you haven't' made a clear decision then again LR(1) parsing 
fails.

============================================
Options for possibly resolving the conflict
=============================================
1. Try to restructure the grammar
2. Find other parsing algorithm


=========================================================
Can LR(1) be used to parse all Context Free languages?
========================================================
ABSOLUTELY NOT!

===============================
We will work through an example
===============================
WE will take an example now and it is probably the simplest non-trivial example that will illustrate this technique and we will see how LR(1) constructs the 
tables that will tell it whether to shift or reduce and reduce by which FLOW. Remember that when we are doing LR(1) parsing, you have your pointer somewhere
inside the String. To the left side of this pointer, you have the symbols that you have already read and to the right you have symbols that you have not 
yet read. And what you have read will be on the Stack but it will NOT NECESSARILY BE IN THE FORM OF TERMINALS. What is on the stack in LR(1) parsing? It is 
not necessarily Terminals. It may be non-terminals because we have made some reductions. Stack has a mix of terminals and non-terminals. But what we have 
NOT PROCESSED yet is a bunch of terminals (all the ones to the right). SO we have a prefix part and a suffix part. The prefix part is the left part that 
is on the stack and the suffix part is the one to the right that we have not read yet. Every reduction that we make will INTRODUCE A NON-TERMINAL.


===============
Example grammar
================
We track the progress that we are making on all productions in the grammar. Let us consider the grammar: 
0. Goal -> A
1. A -> Aa
2. A -> a 

So our start state i.e state0 is going to be "Goal" (this is going to be the first item in every initial state). And we are in the beginning of A then our
lookahead is going to be what? So in order to make this reduction from A to Goal, what should the next symbol be? EOF because this reduction is something 
that you will make ONLY once. So our lookahead will be end-of-file. So, this is our format for what we call LR(1) item.

======================
What is an LR(1) item?
======================
It looks like this: 

State: S0, Production: Goal -> . A, eof 

So, an LR(1) item is more than a production. It is a production of two things that we add, the first thing is the placeholder or the placemaker that we 
add (we place it before A). So this means that we're right at the beginning of this. And this is the lookahead i.e eof. Now when we are at the beginning 
of A, we have to look at the lower level rules to see where we can possibly be in those rules. So this first level in the state means that we are expecting
an A. And we haven't matched anything yet and we are expecting an A. If we can recognize an A then we can make a reduction and then we are done. But we 
should look at the rules that define an A. So in the next few levels we have: 

A -> .Aa, eof    //the lookahead should be the same because if we recognize an Aa then A is what should appear after an A when make this reduction and what shoul appear after an A should be an EOF()
A -> .a , eof    
//SO now,are we done? No we are not. This procedure, which we call the "CLOSURE" OF THIS STATE...we should continue doing this as long as there are non terminals with a placeholder in front it. So above, you can see that there is a placeholder in front of A, so in this case, again we should look at all definitions of A.
A -> .Aa , a   //But now, our lookahed is "A", not an end of file. It means that we are expecting an A followed by a, and this "a" is going to come from the definitions.
A -> .a , a 
//So why are we doing this? We are doing this because what come after an A may be an EOF, or it could be "a" depending on the level at which we are making reductions. 
//So this reduction (level 0) can be made at different levels and at each level, there can be a follow i.e a different symbol that follows it. So the eof lookahead must belong to the follow set of A -> .Aa or this non terminal that we are deriving. 

===========
Example
===========
Let us derive "aaa" 

            Goal 
             A
          A     a 
       A     a
       a
====================
What does this mean?
=====================
It means that this "A a" can be derived at multiple levels but what comes after A is different. So at the 2nd last level we have an "A a"
but what comes after it is going to be different. While the 3rd last level the "A a" is followed by an "eof", so there are multiple possible followers or 
multiple possible lookaheads for a single production. So let us ask ourselves when would it be possible for: A -> .a, eof?  If you just have a single A then
it would be followed by an eof. 

====================
Closure with levels
===================
           S0

level 0 -- Goal -> .A , eof 
level 1 -- A -> .Aa , eof       <--- (i)
level 1 -- A -> .a  , eof
level 2 -- A -> .Aa , a 
level 2 -- A -> .a , a

This closure tries to find al the possibilities.
Also this is our start state. Now, how can we make progress? Well, we can make progress if we see a small "a" or a big "A". If we can recognize a big A then 
we will make the following progress. 

        A    (And let us call this State S1).
//Now we will look at those productions in which the placeholder appears before an A

Goal -> Aa, eof 
A -> A.a , eof  //the point is that if we recognize an "A" in (i) then we are making progress and we will get to this point
A -> A.a , a   


===============
What to do now?
===============
Now, we should find the closure for the above. And for that we look for the placeholder and we see if the placeholder is followed by a non-terminal. DO we?
NOPE! We don't have the placeholder followed by a non-terminal. If we had a placeholder followed by a non-terminal, like A -> A.Xa then we should continue 
and we should look for the rules defining "X". Then we should put all the rules defining "X" and there could be multiple rules defining "X". Now what would
be the follow of this "X"? it will be an a. So we will list all the rules for an X followed by an A like this: 

X -> terminals&/orNon-terminals, a
X -> terminals&/orNon-terminals, a
X -> terminals&/orNon-terminals, a

Now what if we had something like this: A -> A.XY , a ? Now in this case, to continue, we should find all the rules that define "X" followed by First(Y). 

==========
Example
===========
Find the closure for A -> A.XY , a 

where First(Y) = {b, epsilon}

and 
X -> alpha
x -> beta

Then the closure of X will be: 
   X -> alpha, b 
   X -> alpha, a //BECAUSE Y may be epsilon and then it may be replaced with Follow(X).
   X -> beta, b
   X -> beta, a

//So you should cover all the rules for defining an X and then for each rule, we should cover all the possible followers of X.

===============================
Again, what are we trying to do
================================
We are trying to answer the question: What should the lookahead be in order for a REDUCTION to be VALID. 

=====================================
General rule for finding a lookahead
=====================================
If you have a rule like: X -> Beta.CGamma, a 

then in this case the closure for this will be: All the rules that define C. And for each one of these rules, you should have the lookaheads of First(Gammaa)

First (Gammaa) = First(Gamma) if EPSILON DOES NOT BELONG TO First(Gamma) 
OTHERWISE 
First (Gamma) = FIRST(GAMMA) - {Epsilon} UNION {a} 


===============================
Continuing our example from S0 (And let us call this State S2).
===============================
Now, if we get a small "a" then what should we have? 
With a small "a", we should look at the other rules. The rules that have a placeholder preceeding an 'a'. 

A -> a., eof   <--- (ii) 
A -> a. , a    <--- (iii)
 
If we reach S2 and our lookahead is either end-of-file or A then this means that we have recognized enough to make this reduciton. So when the placeholder
reaches the end of the production, it means that we have recognized enough to make up a reduction. 

Reduce (ii) by A -> a., eof Similarly reduce (iii) by A -> a., a 

==========================
So what does this tell us?
===========================
It tells us that the reduction A -> a is valid if the lookahead is either "eof" or "a". 

===================================
Now looking for a reduction from S1
===================================
Reduction means that a placeholder appears at the end of a production. And actually there is a reduction.  "Goal -> A., eof" can be reduced by "Goal -> A".

===============
The leaf state 
================
When a placeholder reaches the end of a production then that is called the "leaf state". Nothing can come after this because the placeholder cannot go any
further. It cannot go beyond this point. It has just reached the end. 


========================
State S3 (for small 'a')
========================
A -> Aa., eof <-- (v) 
A -> Aa., a   <-- (vi)

Now we have two reductions 

WE can reduce (v) by Goal -> A. And reduce (vi) by A -> Aa

========
Tracking our progress
=======
Generally speaking that when you have: 
 X -> Alpha.B, a
What does this mean? It means that what we have recognized so far i.e we have recognized an alpha. So alpha is on the stack. Beta is something that we expect 
if what we have to read next ends up being a beta then we are ready to make a reduction. So it's in the next state, we get X -> AlphaBeta., x 
Now our stack is going to have alpha and the beta in the stack. With the beta being the top of the stack.

==========================================
"dot" coressponds to the top of the stack
==========================================
The symbol to the left of our dot is the top of the stack.

===========
BTW: Using greek symbols
===========
When we use Greek symbols in our examples, they can in-fact be non-terminals and terminals.

===================================================================
Boundary between the stack and what we have to read from the input
===================================================================
This dot (.) placeholder marks the boundary between the stack and what we have to read from the input. To the left are the symbols in the stack.


================================================================
Using all of the above to construct Action Table and GoTo Table
================================================================

==============
Goto Table
==============
The Goto table is going to have the states (and we have four of them right now). So the rows are going to be states and the columns are going to be 
non-terminals. And in this grammar, the only non-terminal is an A.

========  =====
States     A (non-terminal) //here we list the states that have an outgoing edge to this non-terminal.
========  =====
S0         S1
S1         _
S2         _
S3         _

 //From the above, out of S1, S2 and S3 there is no transition on a non-terminal.
==============
Action Table
=============
The logic is that I have these states (s0, s1, s2, s3) and I need to make an action based on the lookahead. So the columns in the action table are going to
be terminals or end of files. So for example, if I am in S0 and I get an "a" then I am not yet ready to make a reduction, so I shift and goto S2.
REMEMBER: The "S" in the action table stands for "Shift".

=========   ===== ======== 
States       a     eof
=========   ===== =======
S0           S2
S1           S3     Accept by rule 0 
S2    reduce by r2  reduce by rule 2 
S3    reduce by r1  reduce by rule 1

===================
Shift-Reduce ERROR
===================
If there had been a reduction in our state S0 for a lookahead of "a" (that would mean that the placemaker or the placeholder had reched the end of some 
production that had the lookahead of "a") but at the same time we could transition to S2 for "a" then that would be called a shift reduce error because at
that point there would be two valid possibilities. 
 
==========
One valid action
==========
At every step, there should be one, unique valid action, either a shift or a reduce. And if it is a reduce, it has to be ONLY ONE reduce. I cannot have 
multiple reductions. 

====================
Reduce-Reduce ERROR
====================
When there are two valid reductions then LR(1) parsing fails. The grammar is then non-LR(1). The Reduce-Reduce error occurs when the placemaker or the 
placeholder reaches the end of multiple productions and these multiple productions have the same lookahead symbol.Example:

A -> Aa. , a 
A -> a.  , a   

The above is a REDUCE-REDUCE ERROR.

===============================
Example: Let us now Parse: "aa"
===============================
Initially we are in State0 (i.e S0), so we push that onto the Stack. Now, we go to the Action table. The action table tells us what to do. And since we 
managed to construct the action table and there is always one unique action to do, it means we always know what to do (i.e whether to shift or to reduce. And
if reduce then by which rule). Now since, I am in s0 and my lookahead is "a" then the action table tells me to Shift to S2 (i.e State#2). Now our stack has 
{S2, a, S0}. Now we are in State#2 and our lookahead is an "a" then we reduce by Rule#2 and resultantly, we will the following from the stack (S2 and a). Now 
our Stack has {S0}.Now this is a tricky part. Now since we have popped those off the stack, now our GOTO is going to depend on what remains after the popping.
So we check GoTo[S0][A]  where "A" is the non-terminal that we got after reducing by rule#2 the last time. 
So we always consult the GOTO Table when we make a reduction (and after popping off the stack). Now the GOTO of [S0][A] is S1. And as a result, we go to 
S1 and push both "A" and "S1" onto the Stack. 
Now our lookahead is still "a" and our current state is "S1", so we consult the action table and consequently we shift to S3 i.e we will push "a" onto the 
stack and we will push "S3" onto the stack. Now our lookahead is an eof, so we check ActionTable[S3][eof] and it tells us to reduce by rule#2, which we do
and consequently, we pop the last 4 items off the stack and then push A onto the stack. Then we consult Goto[S0][A] and we get S1, so we shift to S1 and 
push S1 onto the stack as well. Now our lookahead is eof, so we check ActionTable [S1][eof] then we get Accept, so consequently,  pop the last 2 items of the 
stack and push GOAL onto the stack, and since Goal is our IMPLICIT ACCEPT STATE, therefore, we accept.

==================
The Trickiest Part
==================
The trickiest part is constructing the Closure for our productions. So we look at a production and we list out all the productions of a non-terminal that appears
immediately after a placemaker or a placeholder and then we repeat the process for the First of that non-terminal.

================================
When to consult the GoTo Table
================================
This table is used after a reduction. It tells me which state to go to after a reduction. Why are the columns in a GoTo table non-terminals? Because you look
up the Non-Terminal you REDUCED TO.  Whenever we reduce, we reduce TO A NON-TERMINAL. And what state do you use when consulting to a GoTo table? You use the 
state that you get after popping off.

============================================================================
How many enteries or items will you be popping off the stack when making a reduction?
=============================================================================
It is the number of symbols in a reduction MULTIPLIED BY 2.  Why multiply by 2? Because we have to include the state themselves. 

===========================
Complicatedness of LR(1)
===========================
So LR(1) parsing involves alot of book keeping, so that is why in practice is automated. So there are tools that do this for us. This was the SIMPLEST 
EXAMPLE for LR(1) parsing and it took an entire lecture. The most trivial grammar.
