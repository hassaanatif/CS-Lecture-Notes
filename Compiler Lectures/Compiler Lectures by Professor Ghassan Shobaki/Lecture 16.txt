
                            ============================================================
                            Compilers Lecture 16: Parsing (5): LL(1) Parsing, Part III
                            ============================================================

=================================================================
How can we, again, define LL(1) in terms of First and Follow Sets
=================================================================
If all the First sets don't have an epsilon then the intersection of First and Follow sets must be disjoint. If there is only one valid sustitution or 
expansion of the non-terminal that we are trying to expand. If there are multiple valid expansions then LL(1) will not work. We should also have this 
condition satisfied for every production of the form: 
                                                       A -> B1 | B2 |....|Bn

Then the first sets of the above should be disjoint. And if one of these productions have an epsilon in their First set then we should look at their Follow
sets.

===================
New Example Grammar
===================
S -> A | B 
A -> b
B -> aB' 
B'-> ACB' | Epsilon
C -> AD   | Epsilon 
D -> BC   | bC


====================
Computing First Sets
====================
First+(S->A) = {b} 
First+(S->B) = {a}     

Condition check: First+(S->A) INTERSECTION First(S->B) = PHI

First+(B' -> ACbB') = {b}  //because First(A) doesn't have an epsilon in it. If we have add epsilons in the entire string then we would have to look at the
                          //Follow (B') because B' could potentially be the last string in our string.

First(B'-> Epsilon) = Follow(B') = {eof b}

Now condition check: First+(B' -> ACbB') INTERSECTION WITH First+(B' -> Epsilon) = {b} != PHI  //SO WE CAN STOP HERE. This is enough to say that this grammar
                                                                                              //is not LL(1). 
===========================
Why is the above not LL(1)
===========================
There is an intersection between the Extended First set of B' -> aCbB' and the Extended First set of B' -> Epison. And thus the point is that if you find 
any intersection b/w any two alternatives then the grammar is not LL(1). Only one NON-EMPTY Intersection is enough to say that this grammar is not LL(1).

=============================================
But let us continue with the First sets still
=============================================
First+ (C -> AD) = {b} 
First+ (C -> Epsilon) =  Follow (C) = {b}

Intersection of the above two gives {b} which is again not LL(1) rule.

First+(D -> BC) = First(B) = {a} 
First+(bC) = First(b) = {b}           //The first of a terminal is the terminal itself. 

============================
Important point to remember
============================
Not all Context Free Grammars are LL(1) grammars.

================================================
The problem of determining if a Grammar is LL(1)
================================================
It is undecidable problem. Which means that you cannot come up with an algorithm that will take an arbitrary grammar and tell us if it can be transformed 
into LL(1) or not. Or that it takes a language and it tells us if that Language is LL(1) or not. So it is not always possible to even determine if it is 
LL(1) or not. Sometimes we suceed, sometimes we don't. But for many language constructs, we may transform the grammar into LL(1) grammar and we can 
successfully use the LL(1) parsing technique. 

=================================================================
Set relation between Context Free Languages and LL(1) languages
=================================================================
LL(1) is the subset of CFG. The set of languages that are parsable by LL(1) is the subset of all the languages that belong to context free languages. LR(1) 
is more general and it parses a larger set of languages. Now where are regular languages here? They are a subset of LL(1). Regular are easily parsable. You
don't even need context free grammars. You can recognize a regular language using a Finite State Automata. Context Free Grammars on the other hand are mostly
parsable by LL(1). A bigger set of context free grammars is parsable by LR(1).

===========================
New example for Follow Sets
===========================
X -> aYA1A2A3A4A5.....An

When we want to compute the Follow Set of Y, we look at A1. So if A1 has an Epsilon in it then we look at FIRST(A2). 


=============================
IMPORTANT DISTINCTION TO MAKE
=============================
When computing the Follow Set of Y, we look at A1. If A1 has an epsilon in it then we look at A2. If A2 has an epsilon in it then we look at A3. And so on. 
If A1....An all have epsilons then we look at the Folow (X) and add that to the Follow (Y).



====================
The first of Epsilon
====================
The first of epsilon is the epsilon.


==================================================================
The problem with computing the Follow Set for our above Grammar
==================================================================
The procedure that we described last time for computing the Follow sets is not efficient. Why is it not efficient? Where is it not efficient? If you don't 
have the complete Follow Set of X then you will have to go through another iteration to compute the follow set of X. Also think about A1, A2, A3, and A4. 
Ofcourse these can be terminals or non-terminals. But assuming that these can be non-terminals, I will need to compute the Follow Sets of A1, A2, A3 and A4.
In order to compute the follow set of Y, I will have to scan through A1, A2, A3...An because all of them will have epsilons. In the worst case, I will 
have to scan all of these. Then when I go to compute the follow set of A1, then I will scan A2, A3, A4..An. And then when I go to compute the follow set
of A3, I have to scan through A4, A5...An. So there is a lot of duplication here. In the book, there is a more efficient algorithm. It avoids scanning this
multiple times. It can the scan the list just ONCE by SCANNING BACKWARDS. The algorithm that we discussed last time is conceptually easier to understand,
but it is less efficient. What is more efficient is the algorithm in the book -- in one scan, it updates the Follow Sets of All non-terminals. So in this
example, if we have A1, A2 having epsilons but A3 not having an epsilon but then A4 and A5 having epsilons. In this case, what will be the Follow(A5)? It
will be Follow (x). What will be Follow (A4)? It will be First (A5) UNION Follow (X). And what is Follow(A3)? The Follow(A3) will be Follow(X) UNION 
FIRST(A5) UNION FIRST(A4). So what does this mean? It means that we keep accumulating. By the way, we have to subtract EPSILON from all of the previous 
Follow Sets. So the Algorithm in the book is based on scanning from the last symbol in the production. 

============
The Trailer
============
The trailer is initially the Follow(X) and you keep accumulating in that Trailer the First sets as you scan. But you stop accumulating when you get to
something that does not have an epsilon in it. At that point, we reset the Trailer to the First of the Variable that doesn't have an Epsilon in it. And then
you repeat the process from there.

=======================================================
Where does an Epsilon have to appear of a Non-Terminal
=======================================================
It has to appear in its First set. It doesn't make sense to have an epsilon in the Follow Set. So you cannot say that something is followed by nothing. It
has to be followed by something. And that something couldd be the EOF. So if it is not followed by any other symbol then it is followed by the EOF. It has
to be followed by a Terminal or an EOF. 

===========================================
Rewriting the "Classic Expression Grammar"
===========================================
Expr -> Expr + Term | Expr - Term | Term 
Term -> Term * Factor | Term / Factor | Factor 
Factor -> ident | num | (Expr)
//NOW WOULD LIKE TO ADD ARRAY ELEMENTS AND FUNCTION CALLS TO THIS.

================
As an example
===============
X = 2 * A[5] + 3; 

Here, the A[5] is a FACTOR!
Now look at :  3 * f(y,z,a) + 3;  //THIS, TOO, IS A FUNCTION CALL.


=========================================================================
Now let us integrate these constructs into our Classic Expression Grammar
=========================================================================
Expr -> Expr + Term | Expr - Term | Term 
Term -> Term * Factor | Term / Factor | Factor 
Factor -> ident | num | (Expr) | ident [Expr] | ident (ExprList) 
ExprList -> ExprList, Expr | Expr                                //We don't accept an Epsilon here i.e an empty list of expressions.
 
=========================================
Eliminating Left Recursion from ExprList
=========================================
Expr -> Expr + Term | Expr - Term | Term 
Term -> Term * Factor | Term / Factor | Factor 
Factor -> ident | num | (Expr) | ident [Expr] | ident (ExprList) 
ExprList -> ExprExprList' 
ExprList'-> ,ExprExprList' | Epsilon 


======================================
QUESTION: Is the above Grammar LL(1)?
======================================
No, it is not. Why not? Because if we look at Factor then it has three ALTERNATIVES FOR identifier. And thus if you take an intersection of any two of 
the threes then you'll get an identifier in that set.

================
Can this intersection be resolved?
================
Actually, yes, this is the kind of intersection that we can EASILY ELIMINATE by doing LEFT-FACTORING. Which is like Factoring in math. So the identifier
above is a common factor, so we can transform this factor into the following: 

Factor -> num | (Expr) | identFactor'               //Ident is the common factor, so we put it here and then it is followed by something and this something
                                                   // is followed by multiple alternatives and these alternatives do not have a common factor.
Factor' -> EPSILON | [EXPR] | (ExprList) 


==========================
Left Factoring GENERALITY:
==========================
IF: 
    X -> aB1 | aB2 |....|aBn |gamma1 | gamm2 |....gammaM     //THE PREFIX doesn't have to be a single symbol. 

WITH LEFT FACTORING, THE ABOVE GETS TRANSFORMED TO: 
    X -> aX' | gamma1 | gamma2 |....gammaM 
    X'-> B1  | B2 | Bn

==========================
Note about LEFT FACTORING
==========================
Left Factoring is another way of restructuring your grammar in hopes of making it LL(1) but it is not always guarnateed to work. 


=================================================
2 Tools that we studied for making Grammar LL(1)
==================================================
1. Left Recursion Elimination 
2. Left Factoring 

