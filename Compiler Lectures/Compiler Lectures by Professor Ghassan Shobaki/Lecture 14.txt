

                            ============================================================= 
                             Compilers Lecture 14: Parsing (3): LL(1) Parsing, Part I
                            ============================================================== 

============================
Overview of today's lecture: Top Down Parsing
============================
Today we will talk about one parsing technique. It is called Top Down Parsing. More Specifically we will talk about LL(1) Parsing.  What Top-Down parsing 
means is that we start from the START VARIABLE. We start from the top and we work our way down until we get to the leaves.

=============
LL(1) Parsing
==============
The first L stands for scanning the input from LEFT TO RIGHT. And then SECOND L stands for LEFTMOST Derivation. And (1) here means 1 character lookahead.

==============================================
The problem with our previous form of grammar
==============================================
The first was infinite left recursion in leftmmost derivation parsing. The other problem is that even if we somehow solve this infinite loop problem, the
problem is then in identifying the right susbstitution when there are multiple rules or multiple productions that define that a certain non-terminal or 
variable. Parsing is about determining which substitution is the right substitution for the input that I am looking at. And for our previous form of grammar
we could not deterministically decide which substitution is the right substitution (which means that we will try one substitution and go with it until we 
hit a problem and realize that our substitution is right, and then we will go back and go through all the substitutions that we made and try to find or 
identify the substitution that was wrong). With this backtracking, parsing will not be efficient at all because the time will be exponential function of the 
depth or the height of the tree. 

=================
Predictive Parser
=================
We are looking for a BACKTRACK-FREE Parsing algorithm. Or predictive parser. A predictive parser is a parser that can determine based on a limited number 
of characters which substitution is the right substitution.

===============================
The technique that we talked of
===============================
Towards the end of last lecture we discussed that one technique that will work on this grammar is converting this grammar from the left recursion form to the 
right recursion. And in-fact, in today's lecture we will do this and we will understand when we convert our problematic grammar from the left recursive form
to the right recursive form, things will work out well. So this is something that people have figured out decades ago. People have found that the right 
recursive form of this grammar will work well with an LL(1) parser.


============================
Generalizing the conversion
============================
We can generalize this: 
                       X = X1a1 | X2a2|....|Xnan|b  <--- (i) 
 
we can write (i) as: 
                       X = bX'  <--------- (ii)
                       X' = a1X' | a2X' |...|anX'| epsilon


==================================================================================
Intuitively, why is the Right Recursive format going to work better with parsing?
==================================================================================
If we have a strign "baaaa" and our grammar is (ii), the reason why it is going to work better is because in (ii), it is exposing the beta (b) that must 
appear at the beginning of the string. This is making it explicitly exposed. It is obvious in this grammar that the string must start with a beta. But the
same case is not as obvious in left recursion grammar that the string that must be derived from this must start with a beta. The start is very important 
because what we are trying to do is to match an input string with a grammar given the lookahead. The first character or the first symbol in the string.


================================================================
Lets apply this general rule to the Classic Expression Grammar  
===============================================================

==================
Left Recursive form
====================
Expr -> Expr + Term | Expr - Term | Term 
Term -> Term * Factor | Term / Factor | Factor 
Factor -> num | ident | (Expr)                 


====================
Right Recursive form 
=====================
Matching it with our prototype: 
X = Expr 
alpha1 = +Term 
alpha2 = -Term 
Term   = b (Beta) 

Writing down the final form: 

Expr -> TermExpr' 
Expr'-> +TermExpr' | -TermExpr' | Epsilon
Term -> FactorTerm' 
Term' -> *FactorTerm' | /FactorTerm' | Epsilon 
Factor -> ident | num | (Expr)  //factor doesn't have left recursion, in-fact it has indirect recrusion.

//The point is that this form of the grammar looks odd but in fact it will lead to better parsing. The left recursive form is more readable though.

====================
No backtraking here
====================
We will not have to do any kind of backtracking here. It will always be obvious what the right substitution should be. 


==========================================
One minor issue with our parsing algorithm
==========================================
Let's say that we are trying to parse the string: X + 5 * Y 
Our parse tree will look something like this: 
                                                Expr 
                                        Term            Expr' 
                                 Factor     Term'   +term    Expr' 

Look at the +Term, now we know that it cannot be -Term for sure. But what about epsilon? The epsilon instead of +Term is not necessarily a bad option.
Because the "+" symbol could belong to something that comes right after an Expr'. In other words, I need to do an analysis that tells me what can come after
an Expr' in this grammar. And this is called a "FOLLOW SET". So under what conditions will epsilon be a valid substitution here? Well it will be a valid
substitution if the symbol "+" belongs to the FOLLOW SET OF Expr'.

======================
First and Follow sets
======================
The first(x) is the set of symbols/Terminals that can appear in the beginning of a string or as a first symbol in a string that is derived from x.
The follow(x) is the set of terminals that can come immediately after a string dervied from x. 

================================
COMPUTING First and Follow sets
================================
When computing the First set, it will be easier to compute the sets for the lower level terms or the lower level non-terminals or variables. So let us do
that: 

First(Factor) = {ident OR  num OR ( }
First(Term') =  {* OR / OR EPSILON} 
First(Term) = {ident OR num OR (}
First(Expr') = { +  OR - OR Epsilon) 
First (Expr) = {ident OR num OR ( } 
====================
Thought to consider
====================
NOW IS IT ALWAYS TRUE THAT IF I HAVE X -> YZ THEN THE FIRST OF X WILL BE THE FIRST OF Y? If Y is epsilon then I look at Z. If itself have an epsilon
in its first set then I should look at Z.  
Generally speaking, let's sya that X->A1,A2,A3....An. And let us say that A1 has an epsilon in its first set then I should look at the first set of 
A2. And if A2 has an epsilon in its first set then I should look at A3. Why? Because A1 and A2 may vanish and X may start with an A3.

============================
The follow of start variable
============================
The follow of start variable, IN GENERAL, is always EOF (End Of File).  Why? Because our whole string, in our current example, is an EXPRESSION. So 
Expression is our start variable, which is the biggest thing. So after root of tree, we have End of File. But in fact, if we look at the right hand 
side, we have other things that can appear in the follow set of our expression. 


====================
Computing Follow set
====================
Follow(Expr) = { eof OR ) }
Follow(Expr') = {eof OR )} //Because our whole string is an expression and our first production is saying that the Expr' may appear as the last variable
                              in the expression. So you should put everything that is in the follow sest of Expression in the follow set of Expression'.

Follow(Term) = {+ OR -} //EPISLON NEVER APPEARS IN THE FOLLOW SET. It doesn't make sense for the epsilon to appear in the follow set. Because the follow 
                       // set is about answering the question of what comes after it. And we can't say nothing i.e that nothing comes after it. If it is 
                      // the end of string then what comes after it is the end of file. So it doesn't make sense for the epsilon to appear in the follow set

Follow (Term') = {+ OR - OR eof)
Follow (Factor) = {* OR / OR + OR - OR eof OR ) } //in fact these are all the symbols 
===========================================
Taking epsilon into account in follow sets
============================================
Although we don't necessarily include the epsilon symbol in the follow sets, however we have to take it into account. If epsilon appears in one of the 
productions of the right hand side variable then our current variable that we are computing the follow set for may appear as the last string of the left 
hand side variable and thus we have to include the follow set of the left hand side variable into the follow set of the current variable being tested.
An example of this is: 

Follow(Term) = {+ OR - OR eof OR )}  //deduced from the production#1. 

Now just because epsilon was part of the production of Expr' therefore, Term could potentially be the last part of our expression and therefore we have to 
include the follow set of the Expr itno the follow set of Term.


========================
ONE LAST IMPORTANT THING
=========================
Expr' (Expression Prime) cannot be followed by a "-" or a "+", so this means that we can exclude the epsilon production for it from our grammar.
