
                                 =====================================================================
                                 Lecture 6: Scanning:  Converting a Regular Expression into an NFA                
                                 =====================================================================


====================================================
Constructing an NFA for a trivial regular expression
====================================================
- It will be an NFA for a single letter regular expression. 
- Let's say that our alphabet set SIGMA = {a,b} then we can just construct an NFA that accepts just "a" and hence our regular expression for it will be "a".


        =============================================
        Standard operations over a regular expression
        ==============================================
        A standard regular expression can have any one of the following operations performed on it:
          i) Union, ii) Concatenation , iii) Star (Kleene's Closure)

        If a regular expression has any more of these operations then it is an extension to the notation of the regular expressions.

        ============================================
         Regular expressions as building blocks
        =============================================
         Regular expressions are the building blocks. We know how to construct an NFA for a single letter regular expression, so we that it is TRIVIAL. 
         Now if we can build an NFA for the 3 regular expression OPERATIONS then we can build an NFA for ANY LANGUAGE!!!!


        ===================================
         Breaking down the problem
        ===================================
         Now let us suppose that we have two NFAs : NFA1 and NFA2. So I have two NFAs (both for different languages) and I would like to construct an NFA
         for the UNION. Now the question is: 
                                            "Can I assume, without any loss of generality, that an NFA has a single accept state? Is this a valid assumption
                                             or not...that an NFA has a single accept state."
         Answer: Well, on the surfce, it may look like that we are losing generality, but in fact we are not losing generality. I can assume, without any 
                 loss of generality, that any NFA has a single accept state BECAUSE YOU CAN MAP ALL THE ACCEPT STATES INTO A SINGLE ACCEPT STATE.

        =============================
         NFA for a Union Operation
        ============================= 
         WE just put together a single start state and then we branch (like we did in Kleene's theorem). 
 
        ==================================
         NFA for Concatenation Operation
        ==================================
         This one is quite easy. We just link the end state of the first NFA to the start state of the second NFA and then we will use only the accept state
         of the second NFA. 

        ====================================
         NFA for Kleene's Closure or Star
        ====================================
         This one is a bit tricky. You might be tempted to have an epsilon transition from the final state to the start state. BUTTT! DON'T FORGET THAT 
         closure means that we can ACCEPT AN EPSILON as well. And if we make the start state as one of the final states then that WILL BE DISASTEROUS. 
         It will be disasterous becuase it will then end up accept a lot of the other stuff that shouldn't be accepted. THe right way to do this by 
         introducing a single start state and make it a final state and then introduce an epsilon transition from the final state to the OLD START STATE.


         =============================
          Picture as a demonstration
         =============================
          Reference: Picture #1944

        =============================================
        So how will we construct an NFA for any REGEX 
        =============================================
         We will use Thompson algorithm: We will first create TRIVIAL NFAs for each of the symbols in our REGEX. And then we will slowly construct NFAs for
         the operations on each of those symbols inside the regular expression using the rules that we talked of above. 
 
          
        ====================================
        Problem with the Thompson Procedure?
        ====================================
        It will introduce a ridiculously large number of epsilon transitions and minimizing the redundant epsilon transitions is NOT A TRIVIAL TASK.

          


