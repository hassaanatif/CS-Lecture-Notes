                            =======================================================================
                             Compilers Lecture 25: Code Generation for Conditionals and Loops (1)
                            =======================================================================

===========
Intro
===========
So today is an important lecture. it is very fundamental stuff. And it is somethign that we will have to do in the next assignment. In assignment 4, you only
generate the abstract syntax tree. In assignment five, you take the abstract syntax tree and you actually generate assembly code. Last lecture we discussed 
how to generate abstract assembly for expressions. We did code generation for expressions and the point is that it is recursive. THe idea is to do it 
recursively, because an expression consists of expression within it. And the grammar for the expressions is recursively, so the generation for the code of 
expressions is recursive. 


==============
Example code
===============
1. st1 
2. if (condition) //condition may be something like register1 < register2
3.     st2 //st2 may be list of statements
4. else 
5.     st3
6. st4 


=================================================
General Abstract syntax tree for an If statement
=================================================

             if 
           /   \
       cond    stList 

 
=================================================
General Abstract syntax tree for an If-else statement
=================================================
              
                if 
           /    \     \         
       cond  stList1  stlist2 

why? Because you need something (which is stList1) to execute if the condition is true, and something else (which is stList2) to execute if the condition is
false. So your embedded action for an "if-else" would CONSTRUCT something like the above.  

=========
AST for the above example
=============
                 if/else 
            /    |     |
        cond    st2    st3

======
Now, how do we generate code for the above?
========
Now the code that we will generating will be abstract assemly. It will not be real assembly. So it is generic assembly.  That is, you know, assembly instructions
that are likely to exist on most machines and in particular RISC machines which have fewer instructions. The Abstract assembly that the compiler uses is 
usually generic, and it's something that you expect to have on most machines. Remember that some compilers such as GCC generate code for many many different
machines. And before code for a specific machine, they generate that generic assembly that is execpted not to be found on all machines, but to have some kind
of equivalent. 
The generic assembly that we will be using is "ILOC" in the textbook. ILOC stands for "Intermediate language for an optimizing compiler". And in this language
we will have some compare instructions like: 
cmp_LT rx, ry --> rz     //it takes two registers with arithmetic values andd it puts the result in rz 
cmp_LE
cmp_GT
cmp_GE
cmp_EQ
cmp_NE

So we have these compare insstructions.  Now in order for this to be useful. In order to implement a conditional, what else do we need in a addition to a 
compare instruction, in order to implement a branch. We need a condition branch. So if we put our result in rz, then if we have an instruction that will 
branch (a conditional branch) based on a register and it will go to one of the two possible addresses or labels (syntax given below).

   cr r -> L1, L2   //this will look at the result and if it is true, it will go to L1 otherwise it will go to L2. The result comes from the above compare 
                   //instructions.

=======
Jump instructions
============
jump r  //this is an indrect jump because the address to be jumped onto is stored in the register.
jumpI L //jump immediate. This is a direct jump 
=============
New example
==============
st1 
if (r1 < r2) 
   st2 
else 
   st3
st4 

============================================
Converting our example to abstract assembly
============================================
st1
cmp_LT  r1, r2 -> r3 
cbr r3 -> L1, L2        //conditional branch on r3 
.
.
.
L1 : st2
     jmpI L3 //jump immediate jumps to a label. The label is just a number or a constant. In machine code, it will just be an address in memory. 
L2: st3
l3: st4 

//These L1, L2 and L3 are labels. The assembler is going to take these labels and convert them to addresses.

==========
Basic Block -- concept
============
So the compiler will generally divide a program into basic blocks. A basic block is a straight line piece of code that doesn't have any branches. So in this
case, whenever there is a branch that will mark the end of basic block. And then we will start a new basic block. A jump instruction marks thhe end of a 
basic block. So, every branch or JUMP (whether it is a conditional or an unconditional branch) marks the end of a basic block. And EVERY LABEL marks the 
start of a new basic block. So in order to determine the basic blocks, you just scan the code. In the beginning, you are in basic block#1, whenever you 
encounter a jump or a branch then that marks as the end of the current basic block. Or if you see a label then that marks as the new beginning block. 

==================================================
Marking of the basic blocks from the above example
===================================================
 st1
 cmp_LT  r1, r2 -> r3 
 cbr r3 -> L1, L2                  //BASIC BLOCK 1
 --------------------------        
 L1 : st2                              
      jmpI L3                                    //BASIC BLOCK 2 
 --------------------------- 
 L2: st3                                        //BASIC BLOCK 3 
 ---------------------------- 
 l3: st4                                       //BASIC BLOCK 4


=============
Control flow graph (CFG) concept
============
The compiler would construct a control flow graph that will represent the control flow. Again, in this course, CFG is overloaded. It can stand for context
free grammars, and can stand for control flow graph.

=============
Control flow graph for our above example
==================
  
          Basic Block 1 
        /               \
 Basic Block 2         Basic Block 3
         \            /
          Basic Block 4

========
Importance of these concepts
==========
So these concepts are very fundamental and important. And very intuitive as well. 

=========================================================
Why does the compiler divide the program into basic blocks
==========================================================
Because, as we wil see when we discuss some of the compiler optimizations, it will make things much easier and much more logical when it comes to optimizing
code. For example, moving code or making transformations to the code within a basic block will be much easier than moving across basic blocks or making or 
applying transformations that go across basic blocks. Within the basic blocks, things are very simple and easy and it is a straight line piece of code. 
you don't have branches and you don't have control flow. WHen you start executing the basic block, everything within the basic block will get executed until 
you get to the end of the basic block. So a basic block is a straight line piece of code. 


==========
Representation of the code
===========
One typical representation of the code, after we generate the abstract syntax tree, a typical intermediate representation is to rerpresnet the progrm as a 
control flow graph and within each basic block, there is a linear list of assembly instructions.  

=============
Code generation for a while loop
=======================
For a while loop, you have code like the following:

st1 
while (r1 == r2) 
   st2 
st3 


====================================
Abstract assembly for the above code
====================================
//There are two ways of doing it

---VERSION 1-----
st1 
cmp_EQ r1, r2 -> r3         BASIC BLOCK 1 
cbr r3  -> L1, L2  
-----------------------------
L1: st2 
    cmp_EQ r1, r2 -> r3        BASIC BLOCK 2 
    cbr r3 -> L1, L2 
-----------------------------
L2: st3                        BASIC BLOCK 3
-----------------------------

----VERSION 2-----

----------------
 st1             BASIC BLOCK 1
----------------
L0: cmp_EQ r1, r2 -> r3         BASIC BLOCK 2
    cbr r3 -> L1, L2
------------------ 
L1: st2 
    jumpI L0             BASIC BLOCK 3
------------------- 
L2: st3                  BASIC BLOCK 4
--------------------


================================
Control flow graph for version 1
=================================

       [BB1]
     /      \
    /         \   
[BB2] ------> [B3]
| / \   //self loop on basic block 2
|_ |


================================
Control flow graph for Version 2
=================================

    [BB1]
      |
     \ /
 __\[BB2]
 | /  | \
 |    |  \
 |   \ /  \ 
 |--[BB3]  \> [BB4]


=========================================================
Important things to keep in mind about control flow graph
=========================================================
You have to have a cycle in your control flow graph if there is a loop. If you don't have a cycle then there is something wrong. The cycle indicates a loop
in the graph. 

======================================================
This is all that we need to know for our baby language
======================================================
This is all what you need to know in order to build our basic compiler for our baby language. These are all the features that we have. We will talk more about
boolean expressions or logical expressions, but it is something that we have previously talked about. 

==========
General condition example
====================
 st1 
while (a > b && c == d || e <= f) 
    st2

st3

=================================
Disussion on Boolean expressions
=================================
We have seen how to write grammar for a boolean expression. It is very similar to writing a grammar for an arithmetic expressions because: 
i) the && corresponds to (or maps to) in the arithmetic expressions as a MULTIPLY or a DIVIDE
ii) the || corresponds to + or -

We have actually written grammar for boolean expressions. So generating code for boolean expression is going to be similar to generating code for arithmetic 
expression. It is a similar idea.

==========================
Example boolean expression
==========================
a > b && c == d || e <= f 

====================================
AST for our above boolean expression
====================================

            (||) 
          /      \ 
                 (LE) 
      (&&)       /   \ 
     /    \     (c)  (f)
 (GT)     (EQ) 
 /  \     /   \
(a) (b)  (c)  (d)


This is something that you will do in the assignment. The same way that we wrote code for generating an arithmetic expression, the same thing applies to a 
logical expression, but you will have to take into account the different operations.

===============================
Abstract assembly for the above
===============================
loadAI rarp , @a -> r1 
loadAi rarp , @b -> r2 
cmp_GT r1, r2 -> r3 
loadAI rarp, @c -> r4 
loadAI rarp , @d -> r5 
cmp_EQ r4, r5 -> r6
and r3, r6 -> r7    //and instruction

loadAI rarp, @e -> r8 
loadAI rarp, @f -> r9 
cmp_LE r8, r9 -> r10

or r7, r10 -> r11  //or instruction 
cbr r11 -> L1, L2

==================
So what did we do 
===================
In this case, we had to generate the code for the condition, and the result of the code is in r11. So we will need to do all of the above. So basically, we
will write a recursive routine for generating code for a conditional, no matter how complicated that conditional is. And the result of that conditional 
will be stored in some register. And then you do a conditional branch on either L1 or L2. 
So we know how to write code to generate code for these basic constructs: 
i) Arithmetic expressions 
ii) logical expressions
iii) conditionals 
iv) while loops

So this is basically what we need to do in order to build a compiler.  Also, programming languages are recursive.

=========================
Visualizing a while loop
=========================

         (while)
        /      \
    (cond)     (body)


