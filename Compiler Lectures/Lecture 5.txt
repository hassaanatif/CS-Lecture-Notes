                                 =====================================================================
                                 Lecture 5: Scanning: Regular Expressions for programming Constructs                   
                                 =====================================================================

====================
Why do we use these
====================
Scanner is that stage in the compiler in which we recognize words or tokens. WE DO NOTTTTTT recognize sentences (that correspond to statements in the 
programming). 

==============================================
Main distinction between scanning and parsing
==============================================
- Recognizing words is the scanning phase
- Recognizing sentences is the parsing phase.


=================================
Language of all parts of speech
=================================
The language of all parts of speech is going to be the union of the individual languages like the langauge for the identifier, the language for the constant
, the language for the brnaching statements like if, else etc.

=================================
Sigma in our programming language
==================================
When it comes to programming languages, our sigma is going to be the set of all valid symbols in the programming language that we are desinging a compiler
for. So we will have all the numbers, all the alphabetic characters and we will have upper case alphabets and all the operators: 

 Sigma = [0-9] U {a-z} U {A-Z}  + {- , +, *,...}

====================================================
Example: Regular expression for an unsigned integer
====================================================
We would write it something like: 0 UNION (1-9).(0-9)*   //This doesn't allow leading zeros
- If we were to write (0-9)* , we would have two problems: There can be leading zeros and the second is that it will allow empty symbol (nothing). So it 
                               would make it valid for us to write something like : x = ;


===========================================================
Example: Regular expression for a floating point number
===========================================================
- The assumption is that first off any integer is a floating point number
- RE: 0 U [1-9][0-9]* . [0-9]*  
      ---------------   ---------
      Integer part      real part

- Now what if we wanted to make the floating point optional: Well in that case, we will have to do a union with an epsilon string but we have to keep in 
  mind that since concatenation has a HIGHER PRECEDENCE than UNION therefore we use brackets to override the precendence.

                 RE becomes: (0 U [1-9][0-9]*)((.[0-9]*) U Epsilon) 



================================================
Example: Regular expression for a variable name
================================================
RULES ARE: i) You MUST start with a letter. ii) Then you can have letters and numbers . iii) You can also have underscores in the name 

([a-z] U [A-Z])(([a-z] U [A-Z]) U [0-9] U (_))*


        ===========================================================
         Situation: If we wanted to set a variable length limit?
        ============================================================
         In that case, let us consider K = (([a-z] U [A-Z]) U [0-9] U (_)) 
         Then let us consider that our variable character limit is 5 characters, so our regular expression becomes:
         RE: ([a-z] U [A-Z])(Epsilon U X U X^1 U X^2 U X^3 U X^4) 


=========================================
Example: Regular expression for a string
=========================================
Intuitely we might think that this is: "Sigma*" but don't forget taht Sigma* will have the closing brackets as well so this is false. We as part of our 
convenience, we use an extended regular expression: 
                                                      " ^"* "
Where the carrot sign means the compliement. Or it means ANYTHING BUTTTT the closing brackets. Without using this extended regular expression, we would
have to manually list out all the alphabets except for the closing brackets.And that would be very tedious.
