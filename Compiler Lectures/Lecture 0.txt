========================================
Lecture 0 : Introduction and Syallabus
========================================

=================================================
How do we do the following operation: z = x + y
=================================================
If the machine is a RISC architecture, it will do the following: 
- load x into register 1
- load y into register 2 
- add r1r2 
- store r3 -> z
- Since assembly doesn't know variable names and if x is going to be a local variable stored on the stack then this x in the above instruction will
  be replaced by the offset for that particular variable relative to the starting address for that particular function. 
- The starting point for that particular function is also called the "activation record pointer".


===================
Compiler components
====================

==========
Linker
==========
- Linker links your program to the library functions 
- It chooses a location to put the object code in memory when the program is loaded 

========
Linking
========
- Your program may consist of multiple source files and each source file will get translated into one object file and linking is about linking 
  these object files into an executable.
- Each object file might not be executable by itself.
- In a nutshell, it will resolve all internal or external references and in addition to that, it does one very important thing: 
- It OPTIMIZES YOUR CODE!
- Even though the word optimization is misleading, because a compiler doesn't generate optimal code all the time. 
- If someone ever figures out how to build a compiler that produces optimal code alll the timme then research in compiler optimization will stop. 
- But the compiler produces good code. To make it more efficient. To make it better. 
- The focus of the course is doing the basic translation from high level language to machine code. We will cover fair amount of optimizations but 
  this will not be the main focus of the ocurse. 


=============================
Intermediate Representation
=============================
- The compiler doens't directly go from highh level code to low level code. There is usually some intermediate level. And a very typpical 
  intermediate level representation of the code is abstract syntax tree. Which is a tree represetnation of the code.  
- After generating the intermediate representation, this is then passed into the OPTIMIZER and then the optimizer will apply some transformations 
  to improve the quality of the code and eliminate redundancies. And it will OPTIMIZE IR (intermediate represnation). 
- So this AST is ONE OF THE INTERMEDIATE REPERESTNATIONS. A compiler typically uses multiple intermediate representations. 

===========
Back end 
===========
- This is the last part of the compiler as it does code generation. So it is going to do: 
  i) Instruction selection 
 ii) Instruction scheduling  
iii) Register Allocation (deciding which variables will go into which registers)

- And then it will generate assembly. 


================
Interesting Note
=================
- 60% of the compiler construction course will be focused on understanding how the code goes from the front end to the optimizer.

- The process of going from font end to the optimzer involves what we call scanning and parsing.  And then we have semantic analysis. 


=================
Layman summaries
=================
1. Scanning: You look at your input andd divide it up into tokens and words.                                                                    
2. Parsing : Parsing takes these words and forms it into sentences. Which is a complete program. 
3. Semantic Analysis: Checking if the sentences that we have formed are meaningful. 


===========
Semantic
===========
- It refers to a program that is grammatically correct but it is MEANINGLESS. 
- An example of semantic error is a type mismatch. In English, it could be: The apple at the boy. 


- Normally your program will have a lot more variables than you have registers on the CPU.


===========================================
Basic constructs of a programming language
===========================================
- A programming language will have expressions and assignments. 
- Conditionals (if...else). We can't write a meaningful program without these
- Loops 
- Alll these above are the essential features of a programming language. 


========
Fun fact
========
- Electronics is built on nuclear theory because before people started exploring nuclear theory, they didn't know about the electron. And when
  they started exploring nuclear theory, they started studying the structure of the electrons etc etc 
- So anything theoretical MUST NOT be underestiamted. You never know of its practical applications in the future.
- Theory opens new horizons for us. 

