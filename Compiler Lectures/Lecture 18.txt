
                            ============================================================
                             Compilers Lecture 18: Parsing (7): LR(1) Parsing, Part I
                            ============================================================

================
Expansions
===============
In top down parsing, we start from the root and then we keep making substitutions. But in-fact, in Top-Down, we call these substitutions "expansions" because
they increase the number of symbols. So typically, you substitute S->ABC , so most of the substitutions that you wil be making in a tree will be expansions. 
Until you get to the leaves. The leaves are the terminals. So this is top-down. 

=================================
Bottom Up Parsing and "REDUCTIONS"
==================================
In this, you start with the Terminal or you start with the string and you work your way up the tree until you get to the root of the tree. WHen we are doing
Bottom up parsing, our substitutions are going to be called "REDUCTIONS" because here we reduce. We start with a large number of symbols and then we keep
making substitutions that will reduce the number of symbols until we get to the start symbol.

=========================================
Bottom Up vs Top Down and Real Life Examples
===========================================
In general, Bottom up parsing is more powerful than Top-Down parsing. Why? Because it will have access to both the "LEFT CONTEXT" and the "RIGHT CONTEXT".
Thinking Bottom Up has been used to come up with more advanced techniques. Because Scientific Methodology, you can think of it as a combination of 
"Top Down" or "Bottom Up". Before the scientific methodology was introduced, many people did NOT believe in experiments. When you think about conducting 
experiments and then looking at the results of an experiment then you are looking at concrete data. When you making generalization based on observations or 
the results of an experiment, you are going up or BOTTOM UP. You are going from the "CONCRETE TO THE ABSTRACT". This is exactly what you do in bottom up. 
You have the concrete (WHICH IS THE LEAVES THAT HAVE THE ACTUAL STRING) and you go to the Abstract (which is the Start variable of the derivation). So we
go from the concrete to the abstract. Democracy is another example. When the people elect the President then this BOTTOM UP. Before the introduction of 
democracy, everything was TOP-DOWN. When people started introducing democratic systems, the people (the leaves of the tree) select the president and it is 
directly or indirectly (whether you select delegates that select the president) you are going BOTTOM UP.

===========================================
Which Algorithmic Technique uses Bottom Up
===========================================
It is DYNAMIC PROGRAMMING. We build solutions to the subproblems and we use solutions to the subproblems to build solutions to bigger subproblems and then 
keep doing it until you build solution to the actual problem. 

=============================================================
The algorithmic technique that does the opposite of bottom up
==============================================================
Divide and Conquer. It starts with a big problem and it divides a big problem into smaller problems. Here you are doing top-down. 

====================
Example01
====================
S -> aABe
A -> Abc | b 
B -> B -> d

//This above grammar is not LL(1) because it has a Left-Recursion on A.
//Let us see how we can parse bottom up on this for the String: abbcde

===================
Parsing bottom up
===================
Parsing bottom up means that you start with a string and then you try to find a rule in the grammar that you can use for making a reduction. You do the 
substitution. You substitute the RIGHT HAND SIDE for the left hand side. So for our example string: 
We first look at 'a'. We will read the 'a'. So now after doing that, can we find the 'a' somewhere on the right hand at the END of the RIGHT HAND SIDE OF 
a RULE?  So 'a' never appears at the end of a rule. So we know that we cannot make a reduction with an 'a'. Because there is no rule that ends with an 'a'.
So when we can't make a reduction, we shift. So this bottom up parsing is based on "Shifting" or "Reducing". SO we look for a reduction, and if we cannot
find a reduction, we shift. And also, shifting here means moving the pointer in the input. 
So now, we see a 'b'. Now, we check to see if there is a rule in the grammar that ends with a 'b'? And we do find a one that ends with a 'b', which is 
A -> b. Now we also check to see if there is a rule that ends with the suffix 'ab'? No, there is no such rule. So this is the only option that we have, which
is reducing the 'b' into A. So our String now is:
                                                   aAbcde
And now we look at the third symbol i.e 'b'. Now to the left of our pointer are the characters that we have read.   Now we look at the rules and check to see
whether there is a one that ends with an 'A'? No, there is not, so there is no opportunity for reduction and thus we shift i.e read one more symbol. Now is
there a rules that ends with a 'b'? YES, ther is a rule. But now...is 'b' a good reduction to make? Is it a good idea to reduce a 'b' to an 'A'? Under what 
conditions will this be a good reduction? Given the lookahead and given what we have.  Let us just try to do this: aAAc 
Now the question is, does 'c' ever appear in the Follow Set of A. Now the Follow of A is: Follow(A) = {b d}. Since the lookahead i.e 'c' is not in the follow
set of A, then this reduction will NOT be a valid reduction at this point. So we made this decision, based on both the lookahead which is what we have to 
the right of the pointer and the Left Context as well. 
So now we shift and now we have in the left context: 'Abc' and now we look for a rule in which the RHS ends with a 'c'. And the only rule that does that is:
A -> Abc. And in this rule, we will be reducing this whole thing to an 'A'. So now we have a the string as:  
                                                                                                              aAde
Now, we have 'd' on the right hand side of the pointer and on the l.h.s we have our Left-context.
Again, we look at what we have at the L.H.S of the pointer, and this is stored on the stack already. The LR(1) parsing will be placed in a stack and it shows
us what we have consumed. And on the R.H.S, it consists of stuff that we have not consumed yet.  So currently our stack looks like this: 

A
a 

Now, we don't have anything that ends with an 'A', which means that we cannot reduce it down to anything that ends with an 'A'. You can make a sequence of 
reductions btw. Anyways, we now shift. And then we check to see if we have anything that ends with a 'd' and yes we do. So we substitute. And our string 
becomes:
         aABe
Now check to see if any rule ends with a 'B'. Since there is not a single one then we shift. And then we check to see if there is a rule that ends with an
'e'. And actually we do, so we reduce the entire String with an 'S'.

So this is Top-Down parsing. So we started from the leaves and we worked our way up top. 

================================================
Applying this to the Classic Expression Grammar
================================================
S -> Expr 
Expr -> Expr + Term | Expr - Term | Term 
Term -> Term * factor | Term / factor | factor
factor -> num | iden | (Expr) 

//Since our Expr has multiple alternatives, we have introduced a start variable S that doesn't have multiple alternatives. And let us list all of our rules:

0. Goal -> Expr 
1. Expr -> Expr + Term 
2.          | Expr - Term 
3.          | Term 
4. Term -> Term * Factor 
5.      | Term / Factor 
6.      | Factor 
7. Factor -> ident 
8.      | num   
9.      | (Expr)

==========
Dry Run
==========
Stack                           Input                           Action         
-----                           ------                           --------
empty                        id + num * id                      Shift      //consume word and push it onto stack
id                           +num * id                          reduce by 8           //is there a rule that ends with an id? yes, we also check to see if + belongs to the follow set of factor. And actually '+' does, so this is a valid choice by rules #8. So we reduce by 8. 
Factor                       +num * id                          reduce by 6                //Is there a rule that ends with a factor? Actually yes, we have 3. But in our left context, we have no Term / Factor or Term * Factor, so therefore we are only left with a single option.
Term                         +num * id                          reduce by 3  //is there a rule that ends with a Term? Yes, and '+' is a valid follower of Expr
Expr                         +num * id                          shift           //A goal cannot  be followed by a plus, so therefore, Goal is NOT a valid substitor. 
Expr+                        num * id                           shift           //nothing ends with a plus, I cannot reduce, so I shift
Expr+num                     *id                                reduce          //by rule#7
Expr+Factor                  *id                                reduce         //by rule#6
Expr+Term                    *id                                shift      //does the multiply as a follow for expression? No, it has a follow of EOF or ')' . 
Expr+Term*                    id                                shift 
Expr+Term*id                  eof                               reduce    //by rule#8
Expr+Term*Factor              eof                               reduce   //here we have 2 possible substitutions, rule#4 and rule#6. We have to define how to systematically handle this scenario. 
Expr+Term                     eof                               reduce by rule#1         //again we have 2 possible substitutions. We will define a systematic algorithm later on 
Expr                          eof                               reduce by rule#0 
Goal 


================================================================================================================
Systematic approach to determine whether to shift or to reduce and in case of reduce which rule to use to reduce
================================================================================================================
We do this systematically by keeping a track as we are processing the symbols in the input String. It keeps a track of where we are in each rule. We will have a 
placeholder. At the beginning before we start parsing, our placeholder will be before Expr in rule#0. Because the first rule will have an expression then we
are also in rules #1, #2, #3. This is known as an "IMPLICATION". But then it applies that we are at a rule that defines a Term, so we are in rules #4,5,6 and
similarly in #7,8,9. These placeholders track our progress -- where we are in each rule. So basically for each rule in the grammar, there is a placeholder that
marks where we are. Given what we have parsed and given the lookahead.


======================
Another simple example
======================
Goal -> A 
A    -> Aa | a 
      
