----Background-----
Theory of computers mean that we form several abstrawct mathematical models that will describe wit varying degrees of accuracy parts of computers
and types of computesr andsimilar machines. Our models will not be used to discuss the pracitcal engineerin details o the hardware of computer
but the more abstract qu3estionss of the fonrtiers of capbility of these mechanikcal devices. 
We shall not be interested in optimality at all, but rather we shall be concerned wth the question of possibility -- what can and what cannot be done. 



------Finite Automata (new Chapter) -------
examples include the board games that children play. The outcome of the game is dependent entirely on what sequence or numbers is generated by the dice, 
not on who moves them. 
All the possible positions on the board are called states. The game changes from one state to another in a fashion determined by the input of a certain 
number. We should allow for the possibility that after a number is entered the game is still in the same state as it was before (Fore example, ifthe player
who is in "jail" needs to roll doubles in order to get out, any other roll leaves the board in the same state.). After a certain number of rolls, the player
arrives at a state that means a victory for one of the players and the game is over. We call this a FINAL STATE. 

IMPORTANT NOTE: There might be many possible final states. in computer theory, these are also called "halting states" or "terminal states" or 
                "accpeting states".


Two machines are in the same state if their output pages look the same and their memories look the same cell by cell. 
The computer is also deterministic, by which we mean that, one reading one particular input instruction, the machine converts itself from one given
state to some particular other state (or remains in the same state IF GIVEN A NO-OP) where the restultant state is completely determined yb the piror 
state and the input instruction.
Success of the machine is entirely determined by the sequence of inputs. 

Q: Why is it caleld finite automation ?It is called "finite" auotmation becaysee the number of possible states and the number iof letters in the alhpabet 
are both fjnite, and "automatiom" because the change of states is totally governed by the input. 
Automation comes from the greek word "automata".


            ------------Finite Automation----------
A finite automation is a collection of three things: 
1. A finite set of states, one which is designated as the intial state, called the start state, and some (maybe none) of which are designated as "final states".
2. An alphebet (Sigma E) of possible input letters, from which are formed strings, th at are to be read one lettera at a time. 
3. A finite set of transitions that tell for each state and for each letter of the input alpabet which state to to next.

Sometimes finite automata is also called finite acceptor because its sole job is to accept ceratain input strings and r



We can consider the set of all dice rolls to be the letters of  an alpgabet. 

Following are the three requiremenets demanded by the finite automation: 
 i) states
ii) alphabets
iii) transitions 

------The language defined by the finite automation------
- The set of all strings that do leave us in the final state is called the language defined by the finite automation. So if an input string "aaa" is not in
the language defined by this FA, we can then say that the string aaa is not accepted by this finite autommation because it DOES NOT lead to a final state.


NOTE: SO if a particular String does not leave to a final state then we can say that that String is not part of the language defined by the FA. 

- The set of all the strings accepted is the language associate with the FA. 
- An FA can also be seen as a langauge recognizer. 

------The Transition table------
- the list of transition rules can grow very lon. It is much simpler to summarize them in a table fomrat. Ecah row of the table is the name of one of the 
states in the FA., and each column of the table is a lteter of the input alphabet. The enteries inside the table are new states that the FA moves into

-- the transition states..


----The Transition states---
These are the new states that the FA moves into after receiving a particular input value. 



- Even though it is no more than a table or symbols, we consider an FA to be a machine that is, we understand that this FA has DYMAIC CAPABILITIES.
- What dynamic capabilitie? It moves. It processes input. Something goes from state to state as the input is read in and executed. We may imagine that the 
state we are in at any given time is lit up and the others are dark. An FA running on an input string looks like a pinball machine. 


===========REPRESENTATION OF AN FA==============
- We begin by representing each state by a small circle drawn on a piece of paper. The arrows indiccate which states this particular state will lead to 
  dependingn on the input that it reads. 
-  THese arrows are labeled with the correspondijng alphabet letters.
- If a certain alphabet makes a state go back to itself, we can represent this by an arrow that returns to the same cricle. This arrow is called a loop.


============MINUS SIGN=============
- The start state is indicated by the minus sign. 


===========PLUS SIGN=============
- The final states are indicated by the plus signs. 

-The machine that we have defined by the transiiton list and the transition table can be depicted by the transition diagram.


========Other representations=========
- Sometimes a start state is represented by an arrow entering inside the circle and the final state can be represented by drawing a circle around a circle.


=======Directed graph=========
- The depiction of an FA can be visualized as being a directed graph since it has directed edges, outgoing edges and incoming edges.
- It is possible for a state to have NO INCOMING EDGES.

=======DOES A FA ACCEPT NULL STRING=====
- Not all FAs accept null string. If we receive a null string then that basically means that we are still at the start state. So we could say that if a 
  finite automata ends at the start state then this kind of FA accepts a null string.
- The plus and minus notation inside a single circle means that this particular state is both the start and the final state.


=======FA that accepts no langauge=========
- There are FA's that accept no language. These are of two types:
   i) FA's in which we have not marked any final state. 
  ii) FA's in which the cirlces that represent the final states cannot be reached from the start state.  (This could occur for the following reasons) 
      a) There are two separate componenets (or in other words, the graph is DISCONNECTED). 
      b) There's no state that goes into the final state. 

============Dead-end State (or Dead State)=========
- A dead state is an informal way of describin a state that no string can leave once it has entered. 


========IS there at least one FA that accepts each possible language?==========
A more precise way of putting this question would be: if L is some language, is there necessarily a machinen of thhis type that accepts exactly the inputs
in the L, while rejecting all others. 

Another question to ask: 
                        Can all languages be represented by regular expression? 
- In further chapters we preove that every language that can be accepted by an FA can be edfined by a regular expression and, conversely, every langauge that
  can be defined by a regular expression cn be accepted by some FA. 
- However, we shall see that there are langauges that are neither definable by a regular expression nor accepted by an Fa. 

======What are the conditions for a language to bbe the langauge accepted by an FA?===========
- All the words in the language run to the final state. Also that no strings not in the langauge do.


=====What if we want to include the null string as a valid string/alphabet in the language?========
- We can just mark the start state as the final state and then this would simply imply that even an empty string is in the final state.



















