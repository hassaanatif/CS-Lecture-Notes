                                  =========================================
                                  Algorithms Lecture 9: QuickSort (Part 1)
                                  =========================================

=======
Intro
=======
- Similar to merge sort
- Uses divide and conquer and it does it in a way that is harder to analyze 

=========================
How does quicksort work?
=========================
1. Choose a pivot. The idea of the pivot is to find the element, some element that is hopefully.. Ideally, we would like the pivot to be a median.  
   But it will not be efficient to try to compute the median first than do the quicksort. BUT computing the median might end up being n-squared.
   So, we select a pivot, or a number.
2. Then divide the array into two subarrays. The left subarray has elements less than pivot and the other subarray has greater ellements than pivot. But 
   what if we have elements that are equal to the pivot? Well, they can go in either portion. In-fact, where they will go that will depend on the specific
   implementation of quicksort. The specific implementation will dictate where the equal elements are going to go. 
3. Sort these two subarrays
4. Recursively repeat on each subarrays. 

===================
Why is pivot useful? 
===================
It divided the array into smaller parts. First of all,  we know that the pivot element will be in the right position (being at its final position). But 
that is not all. We have done something even more useful. Because when we divide the array into two sub arrays, one is smaller than the pivot. And one 
is larger than the pivot. This means that we can sort each one of these separately. That is the whole point. That is the whole idea. We can sort these 
two subarrays because we know that no element is going to cross the pivot. So it is just a matter of ordering or reordering them within the subarray.
This is the whole idea behind quicksort. In terms of analysis and in terms of behavior, quicksort is more complicated than merge. Its behavior is LESS
REGULAR and LESS PREDICTABLE. Also, at some point, we will see that selecting the pivot at random will help. But for now, we will select pivot as the last 
element in the array. Just for simplifying things. 

============
Example array
===============
 0  1  2  3  4  5  6  7

[2, 8, 7, 1, 3, 5, 6, 4]

=================
What do we do now
===================
Our pivot is currently "4" (at index 7). We scan the array. "2" is smaller than pivot, so we don't need to move, we'll increase our left boundary by 1. 
Then 8 is greater than the pivot, so we don't do anything and move to the next iteration. Then in the next step, we have "7". It is larger than pivot, so 
don't do anything. Now, we get "1", and it is smaller than the pivot and it is to the right of "8" and "7". Now what is the most EFFICIENT WAY OF ACHEIVING
WHAT WE WANT? Swapping what with what? 
Swapping "1" with "8".  Now how about shifting "8" and "7"? I mean, we can get the same thing by shifting "8" and "7" and then placing "1" at the place of 
preivous "8". Shifting will accomplish the same thing, but is it a good idea to shift? 
NO! Swapping is Theta(1), but when shifting, in general, we will be shifting a couple of elements in this small example, but generally speaing this shifting
can be in general Theta(n). If we start shifting, we can end up with an "n-squared" 
Now at the end of the entire iteration, the right place for the pivot will be the 0th index of the greater subarray.
Now we can just sort the arrays sepearately, and we will not even have to touch the pivot. Sorting the arrays means repeating the process on these subarrays.


========================
Pseudocode for quicksort
========================
So again this is a divide and conquer algorithm and the natural implementation is based on recursion. Pseudocode is: 

Quicksort(A, p, r)  {

q = Partition(A,p,r)
Quicksort(A,p,q-1) 
Quicksort(A, q+1, r)

}


//The partitioning routine will have most of the intelligence in it. 

.
.
.   SKIPPED FOR NOW
. 


                                  =========================================
                                   Algorithms Lecture 11: Median (Part 1)
                                  =========================================


=================================================
Which is easier? Computing the median or sorting?
=================================================
Computing the median should be easier. If you sort an array, will you know the median or not? Yes, you will. After sorting, the item  in the middle will be
the median. So basically, sorting is going to give you the order of every element in the array. While during median, you are not interested in finding the 
order of every element in the array. You are only interested in which element will have its order in the middle. And you don't care about the order of 
other elements. So solving the median problems should be easier because you are looking for less info. You only care who is in the middle. You don't care
where the other elements are.

=================
"n-lg-n" , what does it mean?
==============
We already know how to do sorting in nlogn. So we know how to compute the median in nlgn. But the interesting question is, would it be possible to compute
the median in less than nlgn? Yes. 


==============
Is it possible to compute the median in less than nlgn??
================
Yes. The method is in fact very similar to quicksort. So how does this work? 
Suppose you have an array like this:
   0 1 2 3 4  5 6  7
  [6,2,9,1,12,5,10,3]

So, we have an even number of elements here. In-fact, index#3 will have the lower median, and the element at index#4 will be the higher median after we are 
done sorting. 
Now if we do the paritioning (like quicksort) and we select a pivot. Let us say that pivot ends up being on index#2. What does that mean? It means for sure
that the medium is on the top. Now remember that with the partioning, the top array is still not sorted. So I know that the median is going to be one 
of the elements from the top. But what I know for sure is that the median is not going to be any of the elements in the lower array, because the elements in 
the lower subarray are sorted.

========
How will I find the median?
=======
If you end up with a pivot with the median value. And in fact that will happpen if you eventually end with an array of size 1.

